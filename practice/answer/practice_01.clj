; 1. 整数xを引数として受け取り、xの2乗を計算して返す関数を定義してください。

; 2. リストを引数として受け取り、そのリストの要素を1つずつ表示する関数を定義してください。

; 3. 整数nを引数として受け取り、1からnまでの整数を表示する関数を定義してください。

; 4. 2つの整数xとyを引数として受け取り、xとyの平均値を計算して返す関数を定義してください。

; 5. 文字列を引数として受け取り、その文字列が回文であるかどうかを判定する関数を定義してください。

; 6. キーと値のペアを持つマップを引数として受け取り、キーと値を入れ替えた新しいマップを返す関数を定義してください。

; 7. 整数nを引数として受け取り、n番目のフィボナッチ数を計算して返す関数を定義してください。

; 8. ベクターを引数として受け取り、ベクターの要素を2倍にした新しいベクターを返す関数を定義してください。

; 9. 文字列とパターンを引数として受け取り、パターンに一致する最初の部分文字列を返す関数を定義してください。
; add 関数を拡張し、3つ以上の引数を受け取り、それらの合計を返すようにしてください。

; 10. 以下のリスト [1 2 3 4 5] を反転して、[5 4 3 2 1] となるようにしてください。ただし、組み込みの reverse 関数は使用しないでください。

; 11. 整数値を引数として取り、その数が偶数である場合は "even" を、奇数である場合は "odd" を返す関数 even-or-odd を作成してください。

; 12. 以下のように、defn を使用して無名関数を作成してください。この関数は、引数として渡されたリスト内の要素をすべて二乗し、新しいリストを返します
; (square-all '(1 2 3 4 5)) ; => (1 4 9 16 25)

